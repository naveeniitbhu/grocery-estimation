{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["theme","createTheme","palette","secondary","main","App","state","dishName","noOfIngredients","ingredientsDetails","preparationProcess","buttoncolortgt","handleDishName","event","setState","target","value","handleNoOfIngredients","handleIngredientsDetails","handlePreparationProcess","onCreateButtonSubmit","name","dishname","charAt","toUpperCase","slice","arr","split","mapIngDetails","i","length","data","noofingredients","parseInt","preparation","ingredientsdetails","fetch","method","headers","body","JSON","stringify","then","resp","json","console","log","className","ThemeProvider","Button","variant","color","this","onClick","TextField","onChange","style","paddingText","label","rows","multiline","Component","padding","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wQAOMA,EAAQC,YAAY,CACxBC,QAAS,CACPC,UAAW,CAETC,KAAM,cAkHGC,E,4MA5GbC,MAAQ,CACNC,SAAU,GACVC,gBAAiB,EACjBC,mBAAoB,GACpBC,mBAAoB,GACpBC,eAAgB,W,EAGlBC,eAAiB,SAACC,GAChB,EAAKC,SAAS,CAAEP,SAAUM,EAAME,OAAOC,S,EAGzCC,sBAAwB,SAACJ,GACvB,EAAKC,SAAS,CAAEN,gBAAiBK,EAAME,OAAOC,S,EAGhDE,yBAA2B,SAACL,GAC1B,EAAKC,SAAS,CAAEL,mBAAoBI,EAAME,OAAOC,S,EAGnDG,yBAA2B,SAACN,GAC1B,EAAKC,SAAS,CAAEJ,mBAAoBG,EAAME,OAAOC,S,EAGnDI,qBAAuB,WASrB,IARA,IAAMC,EAAO,EAAKf,MAAMC,SAClBe,EAAWD,EAAKE,OAAO,GAAGC,cAAgBH,EAAKI,MAAM,GAIrDC,EAFgB,EAAKpB,MAAMG,mBAEPkB,MAAM,KAC1BC,EAAgB,GAEbC,EAAI,EAAGA,EAAIH,EAAII,OAAS,EAAGD,GAAK,EACvCD,EAAcF,EAAIG,IAAMH,EAAIG,EAAI,GAGlC,IAAME,EAAO,CACXV,KAAMC,EACNU,gBAAiBC,SAAS,EAAK3B,MAAME,iBACrC0B,YAAa,EAAK5B,MAAMI,mBACxByB,mBAAoBP,GAGtBQ,MAAM,uCAAwC,CAC5CC,OAAQ,OACRC,QAAS,CACP,eAAgB,oBAElBC,KAAMC,KAAKC,UAAUV,KAEpBW,MAAK,SAACC,GAAD,OAAUA,EAAKC,UACpBF,MAAK,SAACC,GACLE,QAAQC,IAAIH,EAAMA,EAAKtB,KAAMU,EAAKV,MAC9BsB,EAAKtB,OAASU,EAAKV,MACrB,EAAKP,SAAS,CAAEH,eAAgB,kB,4CAKxC,WACE,OACE,sBAAKoC,UAAU,MAAf,UACE,kDACA,cAACC,EAAA,EAAD,CAAehD,MAAOA,EAAtB,SACE,cAACiD,EAAA,EAAD,CACEC,QAAQ,YACRC,MAAOC,KAAK9C,MAAMK,eAClB0C,QAASD,KAAKhC,qBAHhB,sBAQF,gCACE,cAACkC,EAAA,EAAD,CACEC,SAAUH,KAAKxC,eACf4C,MAAOC,EACPC,MAAM,YACNR,QAAQ,aAEV,cAACI,EAAA,EAAD,CACEC,SAAUH,KAAKnC,sBACfuC,MAAOC,EACPC,MAAM,qBACNR,QAAQ,aAEV,cAACI,EAAA,EAAD,CACEC,SAAUH,KAAKlC,yBACfsC,MAAOC,EACPE,KAAM,GACNC,WAAS,EACTF,MAAM,sBACNR,QAAQ,gBAGZ,cAACI,EAAA,EAAD,CACEC,SAAUH,KAAKjC,yBACfqC,MAAOC,EACPE,KAAM,GACNC,WAAS,EACTF,MAAM,sBACNR,QAAQ,oB,GAtGAW,aA+GZJ,EAAc,CAClBK,QAAS,QCpHIC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBvB,MAAK,YAAkD,IAA/CwB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.07d6eac3.chunk.js","sourcesContent":["import \"./App.css\";\nimport TextField from \"@material-ui/core/TextField\";\nimport { React, Component } from \"react\";\nimport Button from \"@material-ui/core/Button\";\nimport { createTheme } from \"@material-ui/core/styles\";\nimport { ThemeProvider } from \"@material-ui/styles\";\n\nconst theme = createTheme({\n  palette: {\n    secondary: {\n      // This is green.A700 as hex.\n      main: \"#11cb5f\",\n    },\n  },\n});\n\nclass App extends Component {\n  state = {\n    dishName: \"\",\n    noOfIngredients: 0,\n    ingredientsDetails: \"\",\n    preparationProcess: \"\",\n    buttoncolortgt: \"primary\",\n  };\n\n  handleDishName = (event) => {\n    this.setState({ dishName: event.target.value });\n  };\n\n  handleNoOfIngredients = (event) => {\n    this.setState({ noOfIngredients: event.target.value });\n  };\n\n  handleIngredientsDetails = (event) => {\n    this.setState({ ingredientsDetails: event.target.value });\n  };\n\n  handlePreparationProcess = (event) => {\n    this.setState({ preparationProcess: event.target.value });\n  };\n\n  onCreateButtonSubmit = () => {\n    const name = this.state.dishName;\n    const dishname = name.charAt(0).toUpperCase() + name.slice(1);\n\n    const ingDetailsRaw = this.state.ingredientsDetails;\n\n    const arr = ingDetailsRaw.split(\" \");\n    const mapIngDetails = {};\n\n    for (let i = 0; i < arr.length - 1; i += 2) {\n      mapIngDetails[arr[i]] = arr[i + 1];\n    }\n\n    const data = {\n      name: dishname,\n      noofingredients: parseInt(this.state.noOfIngredients),\n      preparation: this.state.preparationProcess,\n      ingredientsdetails: mapIngDetails,\n    };\n\n    fetch(\"http://localhost:8070/recipe/create/\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(data),\n    })\n      .then((resp) => resp.json())\n      .then((resp) => {\n        console.log(resp, resp.name, data.name);\n        if (resp.name === data.name) {\n          this.setState({ buttoncolortgt: \"secondary\" });\n        }\n      });\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div>Create a recipe</div>\n        <ThemeProvider theme={theme}>\n          <Button\n            variant=\"contained\"\n            color={this.state.buttoncolortgt}\n            onClick={this.onCreateButtonSubmit}\n          >\n            Create\n          </Button>\n        </ThemeProvider>\n        <div>\n          <TextField\n            onChange={this.handleDishName}\n            style={paddingText}\n            label=\"Dish Name\"\n            variant=\"outlined\"\n          />\n          <TextField\n            onChange={this.handleNoOfIngredients}\n            style={paddingText}\n            label=\"No. of Ingredients\"\n            variant=\"outlined\"\n          />\n          <TextField\n            onChange={this.handleIngredientsDetails}\n            style={paddingText}\n            rows={10}\n            multiline\n            label=\"Ingredients Details\"\n            variant=\"outlined\"\n          />\n        </div>\n        <TextField\n          onChange={this.handlePreparationProcess}\n          style={paddingText}\n          rows={12}\n          multiline\n          label=\"Preparation Process\"\n          variant=\"outlined\"\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n\nconst paddingText = {\n  padding: \"10px\",\n};\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}